version: '3.8'
services:
  user:
    build: ./user
    env_file: ./user/.env
    ports:
      - '8081:8081'
    environment:
      DB_HOST: db-user
      NATS_ADDR: nats:4222
      KAFKA_ADDR: kafka:9093
    depends_on:
      - db-user
      - kafka
      - nats
    networks:
      - backend
  transaction:
    build: ./transaction
    env_file: ./transaction/.env
    environment:
      DB_HOST: db-transaction
      NATS_ADDR: nats:4222
      KAFKA_ADDR: kafka:9093
    ports:
      - '8082:8082'
    depends_on:
      - db-transaction
      - kafka
      - nats
    networks:
      - backend
  db-user:
    image: postgres
    hostname: localhost
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      POSTGRES_DB: user
    volumes:
      - postgres-data-user:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
  db-transaction:
    image: postgres
    hostname: localhost
    ports:
      - '5433:5432'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: root
      POSTGRES_DB: transaction
    volumes:
      - postgres-data-transaction:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - backend
  nats:
    image: nats
    ports:
      - '8222:8222'
    command: '--cluster_name NATS --cluster nats://0.0.0.0:6222 --http_port 8222'
    networks:
      - backend
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '2181:2181'
    networks:
      - backend
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - '9092:9092'
    expose:
      - '9093'
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'user-created:1:1'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - backend
networks:
  backend:
    driver: bridge
volumes:
  postgres-data-user:
  postgres-data-transaction:
